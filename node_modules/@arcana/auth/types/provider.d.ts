import { ChainConfigInput, EthereumProvider, JsonRpcId } from './typings';
import SafeEventEmitter from '@metamask/safe-event-emitter';
import IframeWrapper from './iframeWrapper';
interface RequestArguments {
    method: string;
    params?: unknown[] | Record<string, unknown>;
}
interface TriggerLoginFuncs {
    loginWithSocial(loginType: string): void;
    loginWithLink(email: string): void;
}
export declare class ArcanaProvider extends SafeEventEmitter implements EthereumProvider {
    private rpcConfig;
    chainId: string;
    connected: boolean;
    private communication;
    private subscriber;
    private iframe;
    private logger;
    constructor(rpcConfig: ChainConfigInput | undefined);
    isArcana(): boolean;
    init(iframe: IframeWrapper, loginFuncs: TriggerLoginFuncs): Promise<void>;
    private onResponse;
    isLoggedIn(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    isLoginAvailable(type: string): Promise<boolean>;
    requestUserInfo(): Promise<import("./typings").UserInfo>;
    getReconnectionUrl(): Promise<string>;
    getPublicKey(email: string, verifier: string): Promise<string>;
    getAvailableLogins(): Promise<import("./typings").Logins[]>;
    triggerLogout(): Promise<void>;
    initPasswordlessLogin(email: string): Promise<{
        sessionId: string;
        setToken: string;
    }>;
    initSocialLogin(kind: string): Promise<string>;
    expandWallet(): Promise<void>;
    private getCommunication;
    request(args: RequestArguments): Promise<unknown>;
    getResponse<U>(method: string, id: JsonRpcId): Promise<U>;
    setChainId(val: unknown): void;
    handleEvents: (t: string, val: unknown) => void;
}
export {};
